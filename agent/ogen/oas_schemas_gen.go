// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Represents error object.
// Ref: #/components/schemas/Error
type Error struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/MSG
type MSG struct {
	DbType OptString `json:"dbType"`
	Prompt OptString `json:"prompt"`
}

// GetDbType returns the value of DbType.
func (s *MSG) GetDbType() OptString {
	return s.DbType
}

// GetPrompt returns the value of Prompt.
func (s *MSG) GetPrompt() OptString {
	return s.Prompt
}

// SetDbType sets the value of DbType.
func (s *MSG) SetDbType(val OptString) {
	s.DbType = val
}

// SetPrompt sets the value of Prompt.
func (s *MSG) SetPrompt(val OptString) {
	s.Prompt = val
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMSG returns new OptMSG with value set to v.
func NewOptMSG(v MSG) OptMSG {
	return OptMSG{
		Value: v,
		Set:   true,
	}
}

// OptMSG is optional MSG.
type OptMSG struct {
	Value MSG
	Set   bool
}

// IsSet returns true if OptMSG was set.
func (o OptMSG) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMSG) Reset() {
	var v MSG
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMSG) SetTo(v MSG) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMSG) Get() (v MSG, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMSG) Or(d MSG) MSG {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/VisualizableData
type VisualizableData struct {
	VisualizableData string `json:"visualizableData"`
}

// GetVisualizableData returns the value of VisualizableData.
func (s *VisualizableData) GetVisualizableData() string {
	return s.VisualizableData
}

// SetVisualizableData sets the value of VisualizableData.
func (s *VisualizableData) SetVisualizableData(val string) {
	s.VisualizableData = val
}

// VisualizableDataHeaders wraps VisualizableData with response headers.
type VisualizableDataHeaders struct {
	AccessControlAllowHeaders OptString
	AccessControlAllowMethods OptString
	AccessControlAllowOrigin  OptString
	AccessControlMaxAge       OptInt
	Response                  VisualizableData
}

// GetAccessControlAllowHeaders returns the value of AccessControlAllowHeaders.
func (s *VisualizableDataHeaders) GetAccessControlAllowHeaders() OptString {
	return s.AccessControlAllowHeaders
}

// GetAccessControlAllowMethods returns the value of AccessControlAllowMethods.
func (s *VisualizableDataHeaders) GetAccessControlAllowMethods() OptString {
	return s.AccessControlAllowMethods
}

// GetAccessControlAllowOrigin returns the value of AccessControlAllowOrigin.
func (s *VisualizableDataHeaders) GetAccessControlAllowOrigin() OptString {
	return s.AccessControlAllowOrigin
}

// GetAccessControlMaxAge returns the value of AccessControlMaxAge.
func (s *VisualizableDataHeaders) GetAccessControlMaxAge() OptInt {
	return s.AccessControlMaxAge
}

// GetResponse returns the value of Response.
func (s *VisualizableDataHeaders) GetResponse() VisualizableData {
	return s.Response
}

// SetAccessControlAllowHeaders sets the value of AccessControlAllowHeaders.
func (s *VisualizableDataHeaders) SetAccessControlAllowHeaders(val OptString) {
	s.AccessControlAllowHeaders = val
}

// SetAccessControlAllowMethods sets the value of AccessControlAllowMethods.
func (s *VisualizableDataHeaders) SetAccessControlAllowMethods(val OptString) {
	s.AccessControlAllowMethods = val
}

// SetAccessControlAllowOrigin sets the value of AccessControlAllowOrigin.
func (s *VisualizableDataHeaders) SetAccessControlAllowOrigin(val OptString) {
	s.AccessControlAllowOrigin = val
}

// SetAccessControlMaxAge sets the value of AccessControlMaxAge.
func (s *VisualizableDataHeaders) SetAccessControlMaxAge(val OptInt) {
	s.AccessControlMaxAge = val
}

// SetResponse sets the value of Response.
func (s *VisualizableDataHeaders) SetResponse(val VisualizableData) {
	s.Response = val
}
